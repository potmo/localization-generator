@main
public struct Main {

    public static func main() async throws -> Void {




        /*
         TODO:
         * The data needs to be downloaded and decoded from API
         * The data needs to be converted to "SerializableData"
         * All the empty structs has to be created for all "namespaces"
            * Should be like `extension Localization.Klondike { ... }` rather than `extension Localization { struct Klondike { ... }}`
         * The data needs to be checked that and warnings issued when expected translations are missing
         * Fallback to en_GB is not always appropriate at runtime: Infinite loop when english translation is missing
         * Handle cases for en_US etc.
         * Write pluralization rules for supported languages (en, sv, and ru are implemented correctly)
         * Proper formatting (and probably also a mark the files to skip swift format and swift lint)
         * Add a header saying that the files are autogenerated and should not be changed manually
         * Write SupportedLanguages and PluralCase that needs to be present in the target project
         * Write out all translations to file
         * Remove all old translations
         */

        // example of how this is used at the call site
        _ = Localization.Klondike.bananas(bananas: 12)
        _ = Localization.Klondike.buttonName(color: "red")


        // Test generate some translation files
        
        let singularTranslations: [SerializableTranslation] = [
            .singular(language: .en_GB, string: "This is a [%s:button_color] ball"),
            .singular(language: .sv_SE, string: "Detta är en [%s:button_color] boll"),
            .singular(language: .ru_RU, string: "Это [%s:button_color] шар"),
        ]

        let pluralKey: SerializableFunctionArgument = .integer(name: "bananas", parameterName: "numberOfBananas")
        let pluralTranslations: [SerializableTranslation] = [
            .plural(language: .en_GB, pluralKey: pluralKey, pluralCases: [
                .zero(string: "No bananas"),
                .one(string: "One banana"),
                .other(string: "[%i:numberOfBananas] bananas")
            ]),

                
                .plural(language: .sv_SE, pluralKey: pluralKey, pluralCases: [
                    .zero(string: "Ingen banan"),
                    .one(string: "En banan\nBut multiline"),
                    .other(string: "[%i:numberOfBananas] bananer")
                ]),

                .plural(language: .ru_RU, pluralKey: pluralKey, pluralCases: [
                    .zero(string: "нет бананов"),
                    .few(string:  "[%i:numberOfBananas] банан"),
                    .many( string: "[%i:numberOfBananas] банана"),
                    .other( string: "[%i:numberOfBananas] бананов")
                ])
        ]

        let data =
        SerializableStruct(namespace: ["Localization"],
                           structName: "Klondike",
                           functions: [SerializableFunction(functionName: "buttonName",
                                                            arguments: [.string(name: "color", parameterName: "button_color")],
                                                            body: singularTranslations),
                                       SerializableFunction(functionName: "bananas",
                                                            arguments: [pluralKey],
                                                            body: pluralTranslations)
                           ],
                           children: [])


        print(data.string)


    }
}
